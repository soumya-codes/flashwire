// Code generated by Flashwire Codegen. DO NOT EDIT.

package main

import "bytes"
import "slices"

import "github.com/soumya-codes/flashwire/internal/varint"
import "github.com/soumya-codes/flashwire/internal/int32/codec"

// MarshalBinary encodes DataInput50 into a new byte slice.
func (d *DataInput50) MarshalBinary() ([]byte, error) {
	buf, err := d.MarshalBinaryBorrowed()
	if err != nil {
		return nil, err
	}
	defer codec.PutBuffer(buf)
	return slices.Clone(buf.Bytes()), nil
}

// MarshalBinaryBorrowed encodes DataInput50 and returns a borrowed buffer.
// Caller MUST call codec.PutBuffer(buf) after use.
func (d *DataInput50) MarshalBinaryBorrowed() (*bytes.Buffer, error) {
	w := codec.GetBuffer()
	enc := codec.NewWriterFromBuffer(w)
	if err := enc.WriteInt32(d.F00); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}
	if err := enc.WriteInt32(d.F01); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}
	if err := enc.WriteInt32(d.F02); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}
	if err := enc.WriteInt32(d.F03); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}
	if err := enc.WriteInt32(d.F04); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}
	if err := enc.WriteInt32(d.F05); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}
	if err := enc.WriteInt32(d.F06); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}
	if err := enc.WriteInt32(d.F07); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}
	if err := enc.WriteInt32(d.F08); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}
	if err := enc.WriteInt32(d.F09); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}
	if err := enc.WriteInt32(d.F10); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}
	if err := enc.WriteInt32(d.F11); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}
	if err := enc.WriteInt32(d.F12); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}
	if err := enc.WriteInt32(d.F13); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}
	if err := enc.WriteInt32(d.F14); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}
	if err := enc.WriteInt32(d.F15); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}
	if err := enc.WriteInt32(d.F16); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}
	if err := enc.WriteInt32(d.F17); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}
	if err := enc.WriteInt32(d.F18); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}
	if err := enc.WriteInt32(d.F19); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}
	if err := enc.WriteInt32(d.F20); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}
	if err := enc.WriteInt32(d.F21); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}
	if err := enc.WriteInt32(d.F22); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}
	if err := enc.WriteInt32(d.F23); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}
	if err := enc.WriteInt32(d.F24); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}
	if err := enc.WriteInt32(d.F25); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}
	if err := enc.WriteInt32(d.F26); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}
	if err := enc.WriteInt32(d.F27); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}
	if err := enc.WriteInt32(d.F28); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}
	if err := enc.WriteInt32(d.F29); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}
	if err := enc.WriteInt32(d.F30); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}
	if err := enc.WriteInt32(d.F31); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}
	if err := enc.WriteInt32(d.F32); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}
	if err := enc.WriteInt32(d.F33); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}
	if err := enc.WriteInt32(d.F34); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}
	if err := enc.WriteInt32(d.F35); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}
	if err := enc.WriteInt32(d.F36); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}
	if err := enc.WriteInt32(d.F37); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}
	if err := enc.WriteInt32(d.F38); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}
	if err := enc.WriteInt32(d.F39); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}
	if err := enc.WriteInt32(d.F40); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}
	if err := enc.WriteInt32(d.F41); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}
	if err := enc.WriteInt32(d.F42); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}
	if err := enc.WriteInt32(d.F43); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}
	if err := enc.WriteInt32(d.F44); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}
	if err := enc.WriteInt32(d.F45); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}
	if err := enc.WriteInt32(d.F46); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}
	if err := enc.WriteInt32(d.F47); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}
	if err := enc.WriteInt32(d.F48); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}
	if err := enc.WriteInt32(d.F49); err != nil {
		codec.PutBuffer(w)
		return nil, err
	}

	return w, nil
}
// UnmarshalBinary decodes bytes into DataInput50.
func (d *DataInput50) UnmarshalBinary(data []byte) error {
	r := codec.NewReader(data)
	vF00, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F00 = vF00
	vF01, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F01 = vF01
	vF02, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F02 = vF02
	vF03, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F03 = vF03
	vF04, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F04 = vF04
	vF05, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F05 = vF05
	vF06, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F06 = vF06
	vF07, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F07 = vF07
	vF08, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F08 = vF08
	vF09, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F09 = vF09
	vF10, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F10 = vF10
	vF11, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F11 = vF11
	vF12, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F12 = vF12
	vF13, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F13 = vF13
	vF14, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F14 = vF14
	vF15, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F15 = vF15
	vF16, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F16 = vF16
	vF17, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F17 = vF17
	vF18, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F18 = vF18
	vF19, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F19 = vF19
	vF20, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F20 = vF20
	vF21, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F21 = vF21
	vF22, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F22 = vF22
	vF23, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F23 = vF23
	vF24, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F24 = vF24
	vF25, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F25 = vF25
	vF26, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F26 = vF26
	vF27, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F27 = vF27
	vF28, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F28 = vF28
	vF29, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F29 = vF29
	vF30, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F30 = vF30
	vF31, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F31 = vF31
	vF32, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F32 = vF32
	vF33, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F33 = vF33
	vF34, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F34 = vF34
	vF35, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F35 = vF35
	vF36, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F36 = vF36
	vF37, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F37 = vF37
	vF38, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F38 = vF38
	vF39, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F39 = vF39
	vF40, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F40 = vF40
	vF41, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F41 = vF41
	vF42, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F42 = vF42
	vF43, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F43 = vF43
	vF44, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F44 = vF44
	vF45, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F45 = vF45
	vF46, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F46 = vF46
	vF47, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F47 = vF47
	vF48, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F48 = vF48
	vF49, err := r.ReadInt32()
	if err != nil {
		return err
	}
	d.F49 = vF49
	return nil
}
// Size returns the size of the encoded DataInput50.
func (d *DataInput50) Size() int {
	size := 0
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F00)))
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F01)))
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F02)))
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F03)))
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F04)))
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F05)))
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F06)))
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F07)))
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F08)))
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F09)))
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F10)))
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F11)))
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F12)))
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F13)))
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F14)))
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F15)))
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F16)))
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F17)))
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F18)))
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F19)))
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F20)))
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F21)))
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F22)))
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F23)))
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F24)))
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F25)))
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F26)))
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F27)))
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F28)))
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F29)))
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F30)))
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F31)))
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F32)))
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F33)))
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F34)))
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F35)))
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F36)))
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F37)))
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F38)))
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F39)))
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F40)))
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F41)))
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F42)))
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F43)))
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F44)))
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F45)))
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F46)))
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F47)))
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F48)))
	size += varint.VarintSize(uint64(codec.ZigzagEncode32(d.F49)))
	return size
}
